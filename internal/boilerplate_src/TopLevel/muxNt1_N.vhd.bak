library IEEE;
use IEEE.std_logic_1164.all;

entity muxNt1_N is 
generic(N : integer := 32);
port(
	add: in std_logic_vector(N-1 downto 0);
	sub: in std_logic_vector(N-1 downto 0);
	andG: in std_logic_vector(N-1 downto 0);
	orG: in std_logic_vector(N-1 downto 0);
	xorG: in std_logic_vector(N-1 downto 0);
	norG: in std_logic_vector(N-1 downto 0);
	sltA: in std_logic_vector(N-1 downto 0);
	sllA: in std_logic_vector(N-1 downto 0);
	srlA: in std_logic_vector(N-1 downto 0);
	sraA: in std_logic_vector(N-1 downto 0);
	sel: in std_logic_vector(4 downto 0);
	output: out std_logic_vector(N-1 downto 0));
end muxNt1_N;

architecture behave of muxNt1_N is 
begin 
case_statements:process(sel)
begin
	case sel is 
		when "00000" | "00001" | "00010" | "00011" => 
			output <= add;
		when "00100" | "00101" => 
			output <= andG;
		when "00110" => -- nor
			output <= norG;
		when "00111" | "01000" => 
			output <= xorG;
		when "01001" | "01010" => 
			output <= orG;
		when "01011" | "01100" => 
			output <= sltA;
		when "01101" => 
			output <= sllA;
		when "01110" => 
			output <= srlA;
		when "01111" => 
			output <= sraA;
		when "10001" | "10010" => 
			output <= sub;
		when others =>
	end case;
--adding, and, nor, xor, or, slt, sll, srl, sra, sub
end process;
end behave;
